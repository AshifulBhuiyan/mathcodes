---
import MarkdownLayout from 'layouts/MarkdownLayout.astro';
import MathNoteLayout from 'layouts/MathNoteLayout.astro';

// Get subject and slug from the route
const { subject, slug } = Astro.props;

// Import all .mdx and .ts content using glob
const mdxPages = import.meta.glob('../../../content/**/*.mdx');
const tsPages = import.meta.glob('../../../content/**/*.ts');

const mdxKey = `../../../content/${subject}/${slug}.mdx`;
const tsKey = `../../../content/${subject}/${slug}.ts`;

let frontmatter, Content, tsModule;

// Prefer .mdx over .ts
if (mdxPages[mdxKey]) {
  const post = await mdxPages[mdxKey]();
  frontmatter = post.frontmatter;
  Content = post.default;
} else if (tsPages[tsKey]) {
  tsModule = await tsPages[tsKey]();
} else {
  throw new Error(`Content not found for: ${subject}/${slug}`);
}

// ✅ Export getStaticPaths — required for dynamic routes
export async function getStaticPaths() {
  const mdxEntries = Object.keys(import.meta.glob('../../../content/**/*.mdx'));
  const tsEntries = Object.keys(import.meta.glob('../../../content/**/*.ts'));

  const entries = [...mdxEntries, ...tsEntries];

  const paths = entries.map((filepath) => {
    const parts = filepath
      .replace('../../../content/', '') // remove base
      .replace(/\.(mdx|ts)$/, '')       // remove extension
      .split('/');                      // split into [subject, slug]

    return {
      params: {
        subject: parts[0],
        slug: parts[1],
      },
      props: {
        subject: parts[0],
        slug: parts[1],
      },
    };
  });

  return paths;
}
---

{tsModule ? (
  <MathNoteLayout title={tsModule.default.title} content={tsModule.default.content} />
) : (
  <MarkdownLayout title={frontmatter.title}>
    <Content />
  </MarkdownLayout>
)}
