---
import MarkdownLayout from 'layouts/MarkdownLayout.astro';
import MathNoteLayout from 'layouts/MathNoteLayout.astro';

const { subject, slug } = Astro.props;

// Load all content (MDX + TS) eagerly at build time
const mdxPages = import.meta.glob('../../../content/**/*.mdx', { eager: true });
const tsPages = import.meta.glob('../../../content/**/*.ts', { eager: true });
const allPages = { ...mdxPages, ...tsPages };

// Try to find the matching page
const mdxKey = `../../../content/${subject}/${slug}.mdx`;
const tsKey = `../../../content/${subject}/${slug}.ts`;
const key = allPages[mdxKey] ? mdxKey : tsKey;

const mod = allPages[key];
if (!mod) throw new Error(`Content not found: ${subject}/${slug}`);

const frontmatter = mod.frontmatter || mod.default;
const Content = mod.default;

// âœ… Define paths to build
export async function getStaticPaths() {
  const mdxEntries = Object.keys(import.meta.glob('../../../content/**/*.mdx', { eager: true }));
  const tsEntries = Object.keys(import.meta.glob('../../../content/**/*.ts', { eager: true }));

  const entries = [...mdxEntries, ...tsEntries];

  return entries.map((filepath) => {
    const parts = filepath
      .replace('../../../content/', '')
      .replace(/\.(mdx|ts)$/, '')
      .split('/');

    return {
      params: {
        subject: parts[0],
        slug: parts[1],
      },
      props: {
        subject: parts[0],
        slug: parts[1],
      },
    };
  });
}
---

{key.endsWith('.ts') ? (
  <MathNoteLayout title={frontmatter.title} content={frontmatter.content} />
) : (
  <MarkdownLayout title={frontmatter.title}>
    <Content />
  </MarkdownLayout>
)}
